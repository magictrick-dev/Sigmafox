// --- Sigmafox CLI Parser Utility ---------------------------------------------
//
// Written by Chris DeJong Oct. 2024 / Northern Illinois University
//
//      The command line utility parses and validates command line arguments
//      and appropriately sets the ApplicationParameters to necessary constants.
//      The end-point function, parse, returns true/false depending if the CLI
//      specification matches the arguments that were passed in.
//      
// CLI Context-Free Grammar
//
//      cli          : (argument)* source_file (argument)*
//      source_file  : PATH
//      argument     : parameter | switch
//      switch       : "-"(FLAG*)
//      parameter    : "--output-name" PATH | "--output-directory" PATH
//
// The command-line parser converts all CLI arguments (excluding the first, by
// convention) to higher order class objects. These are then parsed and validated,
// modifying ApplicationParameters as needed.
//
// For parsing, we concern ourselves with 3 types of CLI argument types: parameters,
// switches, and values. Values are the most dense of the three and also contain an
// error type which is potentially generated by any of the those types. Switches
// and parameters generate errors if they do not parse to specification, while
// values generate errors only if they don't match as a numerical constant, a
// alpha-numeric/single-quote/double-quote, or a file path. Numerical constants
// are of three distinct types: integer, real, hex, or storage-format. Storage
// format is basically just [integer][b/B,kb/KB,mb/MB,gb/GB,tb/TB]. At parse time,
// these are converted back to numbers, in bytes.
//
// The parser first classifies (tokenizes) the CLI arguments and stores them.
// The grammar is then verified using a trivial recursive descent algorithm that
// handles the specification requirements of parameters and switches. Given that
// the list of arguments conform to the CLI CFG described above, then the return
// value of the parser is true. However, if it fails, then it will return false.
//
// CLI::parse(argc, argv) --> (classify()) --> (conform()) -> return true/false
//
// -----------------------------------------------------------------------------
#ifndef SIGAMFOX_UTILITIES_CLI_H
#define SIGAMFOX_UTILITIES_CLI_H
#include <string>
#include <vector>
#include <environment.h>
#include <definitions.h>

namespace Sigmafox
{

    class CLI;

    // --- CLIArgument ---------------------------------------------------------
    //
    // Serves as the virtual interface for all CLI argument types.
    //

    enum class CLIArgumentType
    {
        Error,
        Switch,
        Parameter,
        Numerical,
        String,
        Filepath,
    };

    class CLIArgument
    {
        public:
                                CLIArgument(i32 index, ccptr argument);
                       virtual ~CLIArgument();

            i32                 get_index() const;
            ccptr               get_argument() const;
            CLIArgumentType     get_type() const;
            void                set_type(CLIArgumentType type) { this->type = type; };

        protected:
            CLIArgumentType type    = CLIArgumentType::Error;
            i32     raw_index       = 0;
            ccptr   raw_argument    = nullptr;

    };

    // --- CLIValue : CLIArgument ----------------------------------------------
    //
    // Arguments that don't evaluate to switches or parameters are classified
    // as values. This is catch-all format (that includes error values).
    //

    class CLIValue : public CLIArgument
    {

        public:
            static CLIArgument* parse(i32 index, ccptr argument);
            static CLIArgument* error(i32 index, ccptr argument);

        protected:
                        CLIValue(i32 argc, ccptr argument);
            virtual    ~CLIValue();

    };

    // --- CLIParameter : CLIArgument ------------------------------------------
    //
    // Parameters corresponds to the "--[name]" specification.
    //

    class CLIParameter : public CLIArgument
    {

        public:
            static CLIArgument* parse(i32 index, ccptr argument);
            std::string get_name() const;

        protected:
                            CLIParameter(i32 argc, ccptr argument);
            virtual        ~CLIParameter();

        protected:
            std::string name;

    };

    // --- CLISwitch : CLIArgument ---------------------------------------------
    //
    // Switches corresponds to the "-[A-Za-z]*" specification.
    //

    class CLISwitch : public CLIArgument
    {

        public:
            static CLIArgument* parse(i32 index, ccptr argument);

        public:
            bool& operator[](char c);
            bool& operator[](i32 idx);

        protected:
                            CLISwitch(i32 argc, ccptr argument);
            virtual        ~CLISwitch();
            i32             offset_at(char c);

        protected:
            bool flags[52];

    };

    // --- CLI -----------------------------------------------------------------
    //
    // The global container for CLI and the parser implementation. This class
    // contains only a single static implementation function called CLI::parse()
    // which is responsible for classifying arguments and conforming it to the CFG.
    //

    class CLI
    {

        public:
            static bool     parse(i32 argc, cptr* argv);
            static bool     has_flag(char c);
            static bool     has_parameter(ccptr parameter);

        protected:
                            CLI();
            virtual        ~CLI();
            static CLI&     self();

            static CLIArgument* classify();
            static CLIArgument* classify_switch();
            static CLIArgument* classify_parameter();
            static CLIArgument* classify_value();

        protected:
            std::vector<CLIArgument*> arguments;
            i32     argi;
            i32     argc;
            cptr   *argv;
            
    };

};

#endif
