So far the parser works, but fails to properly handle the symbols table.

    -   Identifier declared, set as undefined on declaration statements.
    -   Assignment expression statements then evaluate the type.
    -   Undefined types can be used anywhere except on RHS expression statements.

The lexer will need to be adjusted so that the tokenizer feeds procedurally. This
will reduce dependency on the tokens list.

    -   Lexer now takes the source file buffer as well as its offset and step.
    -   Parser directly calls the lexer API to get tokens.
    -   Tokens will no longer persist as long-term values and should be converted
        to literals where they are needed.

String pool needs to be set up in order to store identifier names. The string pool
shouldn't be a searchable set, only to store strings with pointers that reference
their initial location.

    -   A hash table can be used to properly discover if a string has been added
        to the pool. This will reduce the overall size of the pool since identifier
        names will most likely be repeated several times.
    -   The string pool API is used by the symbol table, and therefore connected
        in use-case. Additionally, strings that compose comments and string buffers
        are also stored here.

The modifications above require dynamic resizing and will not fit with single-stack
based approach. The modifications require some changes to the arena allocator such
that we have a region for AST nodes and another for hash tables and string pools.

    -   We make the string pool fixed size. A compiler flag can adjust this to
        be any larger size. If the string pool size is reached, we force-close
        and display a warning that the compilation can not be complete without
        increasing the memory pool size capacity.

We are now reaching the point where we need CLI flags then.

    -   CLI parser.
    -   Double dashes have parameters.
    -   Single dashes are toggle-flags.
    -   File names always come first, then any combination of parameters/flags.
    -   First pass joins flags.
    -   Second pass validates grammar.
    -   Third pass validates file paths.
    -   Output is a structure which contains the list of source files and options.

    -   A set of flags for:

            --output-name [string]
                Example: sigmafox fibonacci.fox --output-name fibonacci
                Default: --output-name main

                Sets the output name of either compiled binary or the entry point.
                File extensions are automatically set.

            --output-directory [directory]
                Example: sigmafox fibonacci.fox --output-directory ./build
                Default: --output-directory ./

                Sets the directory where all build files are stored.

            -c, --compile
                Example: sigmafox fibonacci.fox -c -o build/fibonacci.exe
                Default:

                Enables direct-to-binary compilation.

            -t, --trim-comments
                Example: sigmafox fibonacci.fox -t
                Default:

                Removes all comments from the generated C++ file.

            --memory-limit-size [memory-size]
                Example: --memory-limit 4GB
                Default: --memory-limit 4GB

                Sets the amount of memory the transpiler reserves at startup.
                The transpiler will error out with an appropriate message if
                this capacity is reached.

            --string-pool-size [memory-size]
                Example: --string-pool-size 16MB
                Default: --string-pool-size 16MB

                Sets the amount of memory reserved within the string pool. The
                transpiler uses this to store identifier names and string buffers
                during the parsing phase. The transpiler will error out with an
                appropriate message if this capacity is reached. The size of the
                string pool proportionally reduces the amount of free-space the
                transpiler has for other allocations.

