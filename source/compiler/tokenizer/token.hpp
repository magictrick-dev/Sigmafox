#ifndef SIGMAFOX_COMPILER_TOKENIZER_TOKEN_HPP
#define SIGMAFOX_COMPILER_TOKENIZER_TOKEN_HPP
#include <definitions.hpp>

enum class TokenType
{
    TOKEN_VOID,

    TOKEN_COMMENT_BLOCK,
    TOKEN_LEFT_PARENTHESIS,
    TOKEN_RIGHT_PARENTHESIS,
    TOKEN_COMMA,
    TOKEN_SEMICOLON,
    TOKEN_COLON_EQUALS,
    TOKEN_PLUS,
    TOKEN_MINUS,
    TOKEN_STAR,
    TOKEN_FORWARD_SLASH,
    TOKEN_CARROT,
    TOKEN_EQUALS,
    TOKEN_LESS_THAN,
    TOKEN_LESS_THAN_EQUALS,
    TOKEN_GREATER_THAN,
    TOKEN_GREATER_THAN_EQUALS,
    TOKEN_HASH,
    TOKEN_AMPERSAND,
    TOKEN_PIPE,
    TOKEN_PERCENT,

    TOKEN_INTEGER,
    TOKEN_REAL,
    TOKEN_STRING,
    TOKEN_IDENTIFIER,

    TOKEN_KEYWORD_BEGIN,
    TOKEN_KEYWORD_ELSEIF,
    TOKEN_KEYWORD_END,
    TOKEN_KEYWORD_ENDFIT,
    TOKEN_KEYWORD_ENDIF,
    TOKEN_KEYWORD_ENDFUNCTION,
    TOKEN_KEYWORD_ENDLOOP,
    TOKEN_KEYWORD_ENDPLOOP,
    TOKEN_KEYWORD_ENDPROCEDURE,
    TOKEN_KEYWORD_ENDSCOPE,
    TOKEN_KEYWORD_ENDWHILE,
    TOKEN_KEYWORD_FIT,
    TOKEN_KEYWORD_FUNCTION,
    TOKEN_KEYWORD_IF,
    TOKEN_KEYWORD_INCLUDE,
    TOKEN_KEYWORD_LOOP,
    TOKEN_KEYWORD_PLOOP,
    TOKEN_KEYWORD_PROCEDURE,
    TOKEN_KEYWORD_READ,
    TOKEN_KEYWORD_SAVE,
    TOKEN_KEYWORD_SCOPE,
    TOKEN_KEYWORD_VARIABLE,
    TOKEN_KEYWORD_WHILE,
    TOKEN_KEYWORD_WRITE,
    TOKEN_NEW_LINE,

    TOKEN_EOF = 1000,
    TOKEN_UNDEFINED,
    TOKEN_UNDEFINED_EOF,
    TOKEN_UNDEFINED_EOL,
};

struct Token
{

    std::string     reference;
    TokenType       type;
    i32             row;
    i32             column;

    static std::string type_to_string(TokenType type);
        
};

#endif